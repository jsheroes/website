---
import type { AstroComponentFactory } from "astro/dist/runtime/server";
import { CollectionEntry, getEntryBySlug } from "astro:content";

interface Props {
  person:
    | CollectionEntry<"organizers">
    | CollectionEntry<"ambassadors">
    | CollectionEntry<"speakers">
    | CollectionEntry<"support">
    | CollectionEntry<"guest-writers">;
}

const { person } = Astro.props as Props;

const speakerTalk = await getEntryBySlug("speaker-talks", person.slug);

const { Content: BioContent } = await person.render();

let TalkContent: AstroComponentFactory | null = null;
if (speakerTalk) {
  const { Content } = await speakerTalk.render();
  TalkContent = Content;
}

let links = [];
const linkMap: Record<string, string> = {
  twitter: "Twitter",
  github: "GitHub",
  website: "Website",
  linkedin: "LinkedIn",
};

const sortOrder = [
  linkMap.twitter,
  linkMap.github,
  linkMap.linkedin,
  linkMap.website,
];

if (person.data.links) {
  for (const [key, value] of Object.entries(person.data.links)) {
    links.push({
      name: linkMap[key],
      url: value,
      icon: `/img/icons/${key === "website" ? "link" : key}.svg`,
    });
  }
}

links.sort((a, b) => sortOrder.indexOf(a.name) - sortOrder.indexOf(b.name));
---

<dialog
  aria-labelledby={`${person.id}-title`}
  id={person.id}
  onclick="if (event.currentTarget === event.target) event.currentTarget.close()"
>
  <main>
    <div class="bio">
      <div class="bio-info">
        <img
          class="photo"
          src={`/img/${person.data.imgName}`}
          alt={person.data.name}
          loading="lazy"
        />
        <div class="bio-links">
          {
            links.length > 0 &&
              links.map((link) => (
                <a
                  href={link.url}
                  target="_blank"
                  rel="noopener"
                  title={link.name}
                >
                  <img src={link.icon} alt={link.name} loading="lazy" />
                </a>
              ))
          }
        </div>
      </div>

      <div class="bio-details">
        <div id={`${person.id}-title`} class="bio-title" role="heading">
          <strong class="bio-name">{person.data.name}</strong>
          <span
            >{
              person.data.company
                ? `${person.data.title} @ ${person.data.company}`
                : person.data.title
            }</span
          >
        </div>

        <BioContent />
      </div>
    </div>

    {
      speakerTalk && TalkContent ? (
        <div class="talk">
          <strong>Talk: {speakerTalk.data.title}</strong>
          <TalkContent />
        </div>
      ) : null
    }
  </main>

  <form method="dialog">
    <button aria-label="Close modal">
      <img alt="Close modal" class="close" src="/img/icons/close.svg" />
    </button>
  </form>
</dialog>

<style>
  dialog {
    position: fixed;
    margin: auto;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    padding: 1rem;
    overflow: visible;
    border: 1rem solid var(--person-accent-color);
  }

  dialog[open] {
    display: flex;
  }

  @media screen and (max-width: 550px) {
    dialog {
      height: 100%;
      width: 100%;
    }
  }

  dialog::backdrop {
    position: fixed;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    background: rgba(0, 0, 0, 0.6);
  }

  button {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
    padding: 0;
    appearance: none;
    border: 0px solid var(--color-neutral-light);
    border-radius: 50%;
    top: -2rem;
    right: -2rem;
    width: 3rem;
    height: 3rem;
    background: var(--person-accent-color);
    transition: border-width var(--speed-move) ease-out,
      outline-offset var(--speed-move) ease-out;
  }

  button:hover {
    border-width: 4px;
  }

  button:hover .close {
    transform: scale(1.2);
  }

  .close {
    width: 1.5rem;
    height: 1.5rem;
    transition: transform var(--speed-move) ease-out;
  }

  main {
    overflow: auto;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    max-width: 800px;
    width: 100%;
  }

  .bio {
    display: flex;
    gap: 1rem;
    padding-bottom: 10px;
  }

  .bio-info {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .bio-links {
    display: flex;
    gap: 1rem;
    padding: 0 0.5rem;
  }

  .bio-links > a {
    display: flex;
    width: 1.2rem;
    height: 1.2rem;
    transition: all var(--speed-move) ease-out;
  }

  .bio-links > a:hover {
    transform: scale(1.2);
    filter: contrast(200);
  }

  .bio-details {
    min-width: 250px;
  }

  p {
    margin: 0;
  }

  .photo {
    width: 250px;
    height: 250px;
  }

  .bio-title {
    display: flex;
    flex-direction: column;
  }

  .bio-name {
    font-size: var(--font-size-lg);
  }

  @media screen and (max-width: 756px) {
    .bio {
      flex-direction: column;
      align-items: center;
      width: 100%;
    }

    .bio-details {
      min-width: auto;
    }

    .bio-title {
      text-align: center;
    }

    .bio-info {
      align-items: center;
    }

    .photo {
      width: 200px;
      height: 200px;
    }
  }
</style>
