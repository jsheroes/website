---
import type { AstroComponentFactory } from "astro/dist/runtime/server";
import { type CollectionEntry, getEntryBySlug } from "astro:content";
import { Image } from "astro:assets";
import { getImage } from "../utils/getImage";

interface Props {
  person:
    | CollectionEntry<"organizers">
    | CollectionEntry<"ambassadors">
    | CollectionEntry<"speakers">
    | CollectionEntry<"support">
    | CollectionEntry<"guest-writers">;
}

const { person } = Astro.props as Props;

const speakerTalk = await getEntryBySlug("speaker-talks", person.slug);

const { Content: BioContent } = await person.render();

let TalkContent: AstroComponentFactory | null = null;
if (speakerTalk) {
  const { Content } = await speakerTalk.render();
  TalkContent = Content;
}

let links = [];
const linkMap: Record<string, string> = {
  bluesky: "Bluesky",
  twitter: "Twitter",
  github: "GitHub",
  website: "Website",
  linkedin: "LinkedIn",
};

const sortOrder = [
  linkMap.bluesky,
  linkMap.twitter,
  linkMap.github,
  linkMap.linkedin,
  linkMap.website,
];

if (person.data.links) {
  for (const [key, value] of Object.entries(person.data.links)) {
    links.push({
      name: linkMap[key],
      url: value,
      icon: `/img/icons/${key === "website" ? "link" : key}.svg`,
    });
  }
}

links.sort((a, b) => sortOrder.indexOf(a.name) - sortOrder.indexOf(b.name));
---

<dialog
  aria-labelledby={`${person.id}-title`}
  id={person.id}
  onclick="
  if (event.currentTarget === event.target) event.currentTarget.close()
  "
>
  <main class="w-100% flex max-w-[800px] flex-col gap-6 overflow-auto">
    <div
      class="w-100% flex flex-col items-center gap-4 pb-2 md:flex-row md:items-start"
    >
      <div class="flex flex-col items-center gap-4 md:items-start">
        <Image
          src={getImage(person.data.imgName)}
          alt={person.data.name}
          width="250"
          height="250"
          class="max-w-[inherit]"
        />
        <div class="flex gap-4 px-2">
          {
            links.length > 0 &&
              links.map((link) => (
                <a
                  class="flex h-5 w-5 transition-all duration-move ease-out hover:scale-125 hover:contrast-200"
                  href={link.url as string}
                  target="_blank"
                  rel="noopener"
                  title={link.name}
                >
                  <img src={link.icon} alt={link.name} loading="lazy" />
                </a>
              ))
          }
        </div>
      </div>

      <div class="min-w-auto flex flex-col gap-2 md:min-w-[250px]">
        <div id={`${person.id}-title`} class="flex flex-col" role="heading">
          <strong class="text-lg">{person.data.name}</strong>
          <span
            >{
              person.data.company
                ? `${person.data.title} @ ${person.data.company}`
                : person.data.title
            }</span
          >
        </div>

        <BioContent />
      </div>
    </div>

    {
      speakerTalk && TalkContent ? (
        <div class="flex flex-col gap-2">
          <strong>Talk: {speakerTalk.data.title}</strong>
          <TalkContent />
        </div>
      ) : null
    }
  </main>

  <form method="dialog">
    <button
      class="group/close-btn absolute right-[-2rem] top-[-2rem] z-10 flex h-12 w-12 appearance-none items-center justify-center rounded-full border-solid border-neutral-light bg-[var(--person-accent-color)] p-0 transition-all duration-move ease-out hover:border-4"
      aria-label="Close modal"
    >
      <img
        alt="Close modal"
        class="h-6 w-6 transition-all duration-move ease-out group-hover/close-btn:scale-125"
        src="/img/icons/close.svg"
      />
    </button>
  </form>
</dialog>
