---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import type { AgendaItem } from "../data/types";

export interface Props {
  agendaItems: AgendaItem[];
  title: string;
}

import { getImage } from "../utils/getImage";

const speakers = await getCollection("speakers");
const speakerTalks = await getCollection("speaker-talks");

const { agendaItems, title } = Astro.props as Props;
---

<h3>{title}</h3>

<ul class="flex flex-col p-0 m-0 font-display">
  {
    agendaItems.map((agendaItem) => {
      if (agendaItem.type === "placeholder") {
        return (
          <li class="flex flex-col md:flex-row gap-4 py-4 items-start md:items-center agenda-item">
            <span class="whitespace-nowrap">{agendaItem.timeSlot}</span>
            <div class="flex gap-4 items-center">
              <img class="grayscale h-20 w-20 rounded-full" src={`/img/${agendaItem.imgName}`} />
              <span>{agendaItem.content}</span>
            </div>
          </li>
        );
      } else {
        // TODO: Handle multiple speakers, currently assume speakers[0]
        const speakerSlugs = agendaItem.speakers;
        const matchingSpeakers = speakers.filter((s) => speakerSlugs.includes(s.slug));

        if (matchingSpeakers.length === 0) {
          return (
            <li class="flex flex-col md:flex-row gap-4 py-4 items-start md:items-center agenda-item">
              <span class="whitespace-nowrap">{agendaItem.timeSlot}</span>
              <div class="flex gap-4 items-center">
                <img class="grayscale h-20 w-20 rounded-full" src={`/img/props/bear.svg`} />
                <span>TBA</span>
              </div>
            </li>
          );
        }

        const speakerTalk = speakerTalks.find((s) => s.slug === matchingSpeakers[0].slug);

        return (
          <li class="flex flex-col md:flex-row gap-4 py-4 items-start md:items-center agenda-item">
            <span class="whitespace-nowrap">{agendaItem.timeSlot}</span>
            <div class="flex gap-4 items-center">
              <div class="flex shrink-0">
                {matchingSpeakers.map(speaker => (
                  <button
                    aria-haspopup="dialog"
                    aria-controls={speaker.id}
                    class="group rounded-full focus-visible:outline-dashed focus-visible:outline-width-[6px] focus-visible:outline-accent-pink focus-visible:outline-offset-[8px] [&:not(:last-child)]:mr-[-24px]"
                    onclick={`window['${speaker.id}'].showModal()`}
                    title={`See the profile of ${speaker.data.name}`}
                  >
                    <Image
                      src={getImage(speaker.data.imgName)}
                      class="grayscale h-20 w-20 rounded-full transition-[border-width, filter] duration-fade ease-out group-focus-visible:grayscale-0 hover:grayscale-0 hover:border-[0.45rem] border-[var(--person-accent-color)]"
                      alt={speaker.data.name}
                      width="95"
                      height="95"
                      loading="eager"
                    />
                  </button>
                ))}
              </div>
              <div class="flex flex-col">
                <strong>{matchingSpeakers.map(speaker => speaker.data.name).join(" & ")}</strong>
                <span>{speakerTalk ? speakerTalk.data.title : "TBA"}</span>
              </div>
            </div>
          </li>
        );
      }
    })
  }
</ul>

<style>
  .agenda-item:nth-child(3n) {
    --person-accent-color: theme("colors.accent-pink");
  }

  .agenda-item:nth-child(3n + 1) {
    --person-accent-color: theme("colors.accent-orange");
  }

  .agenda-item:nth-child(3n + 2) {
    --person-accent-color: theme("colors.accent-green");
  }

  .agenda-item:not(:last-child) {
    border-bottom: 1px solid theme("colors.accent-pink");
  }
</style>
