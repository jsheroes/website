---
import { getCollection } from "astro:content";
import type { AgendaItem } from "../data/types";

export interface Props {
  agendaItems: AgendaItem[];
  title: string;
}

const speakers = await getCollection("speakers");
const speakerTalks = await getCollection("speaker-talks");

const { agendaItems, title } = Astro.props as Props;
---

<h3>{title}</h3>

<ul class="agenda-items">
  {
    agendaItems.map((agendaItem) => {
      if (agendaItem.type === "placeholder") {
        return (
          <li class="agenda-item">
            <div class="agenda-row">
              <span class="time-slot">{agendaItem.timeSlot}</span>

              <div class="speaker-slot">
                <img src={`/img/${agendaItem.imgName}`} />
                <span>{agendaItem.content}</span>
              </div>
            </div>
          </li>
        );
      } else {
        // TODO: Handle multiple speakers, currently assume speakers[0]
        const speakerSlug = agendaItem.speakers[0];
        const speaker = speakers.find((s) => s.slug === speakerSlug);

        if (!speakerSlug || !speaker) {
          return (
            <li class="agenda-item">
              <div class="agenda-row">
                <span class="time-slot">{agendaItem.timeSlot}</span>

                <div class="speaker-slot">
                  <img src={`/img/props/bear.svg`} />
                  <span>TBA</span>
                </div>
              </div>
            </li>
          );
        }

        const speakerTalk = speakerTalks.find((s) => s.slug === speakerSlug);

        return (
          <li class="agenda-item">
            <button
              aria-haspopup="dialog"
              aria-controls={speaker.id}
              class="agenda-row clickable"
              onclick={`window['${speaker.id}'].showModal()`}
              title={`See the profile of ${speaker.data.name}`}
            >
              <span class="time-slot">{agendaItem.timeSlot}</span>
              <div class="speaker-slot">
                <img src={`/img/${speaker.data.imgName}`} />
                <div class="talk">
                  <strong>{speaker.data.name}</strong>
                  <span>{speakerTalk ? speakerTalk.data.title : "TBA"}</span>
                </div>
              </div>
            </button>
          </li>
        );
      }
    })
  }
</ul>

<style>
  .agenda-items {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    font-family: theme("fontFamily.display");
  }

  .agenda-item {
    display: flex;
  }

  .agenda-item:not(:last-child) {
    border-bottom: 1px solid theme("colors.accent-pink");
  }

  .agenda-item:nth-child(3n) img {
    border: 0 solid theme("colors.accent-pink");
  }

  .agenda-item:nth-child(3n + 1) img {
    border: 0 solid theme("colors.accent-orange");
  }

  .agenda-item:nth-child(3n + 2) img {
    border: 0 solid theme("colors.accent-green");
  }

  .agenda-row {
    padding: 1rem 0;
    display: flex;
    align-items: center;
    gap: 4rem;
    transition: outline-offset theme("transitionDuration.fade") ease-out;
  }

  .agenda-row.clickable {
    border: 0;
    background: none;
    font-family: inherit;
    font-size: inherit;
    text-align: inherit;
    width: 100%;
  }

  @media screen and (max-width: 756px) {
    .agenda-row {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
      padding: 1rem 0;
    }
  }

  .agenda-row img {
    height: 5rem;
    width: 5rem;
    border-radius: 50%;
    filter: grayscale(1);
    transition:
      border-width theme("transitionDuration.fade") ease-out,
      filter theme("transitionDuration.fade") ease-out;
  }

  .agenda-row:hover img {
    border-width: 0.45rem;
    filter: none;
  }

  .agenda-row:focus-visible {
    outline: dashed theme("colors.accent-pink") 5px;
    outline-offset: 8px;
    filter: grayscale(0);
  }

  .agenda-row:focus-visible img {
    filter: none;
  }

  .time-slot {
    white-space: nowrap;
  }

  .speaker-slot {
    display: flex;
    align-items: center;
    gap: 1rem;
    height: 100%;
    transition: gap theme("transitionDuration.move") ease-out;
  }

  .talk {
    display: flex;
    flex-direction: column;
  }
</style>
